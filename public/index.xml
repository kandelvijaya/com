<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kandelvijaya</title>
    <link>http://kandelvijaya.com/</link>
    <description>Recent content on Kandelvijaya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Vijaya P. Kandelvijaya</copyright>
    <lastBuildDate>Sun, 20 Nov 2016 14:28:01 +0100</lastBuildDate>
    <atom:link href="http://kandelvijaya.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GTX Nov: Bisecting, Emacs and killing line. </title>
      <link>http://kandelvijaya.com/gtxmonthly/gtxTips_nov2016/</link>
      <pubDate>Sun, 20 Nov 2016 14:28:01 +0100</pubDate>
      
      <guid>http://kandelvijaya.com/gtxmonthly/gtxTips_nov2016/</guid>
      <description>

&lt;p&gt;Welcome to this months GTX. How are you? Its cold here in Berlin. Lets get to this months
GTX(Git, Terminal, XCode) tips.&lt;/p&gt;

&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;

&lt;h3 id=&#34;1-finding-which-commit-broke-the-project-first&#34;&gt;1. Finding which commit broke the project first&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git-bisect&lt;/code&gt; is the command you are looking for if you happen to search for a commit in the
past week which silently broke the project and the CI is failing.&lt;/p&gt;

&lt;p&gt;I was introduced to this command while at work from my colleague, @ramy_kfoury.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect start
$ git bisect bad                 # Current version is bad
$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then git will stop at the middle commit. It uses binary search to narrow down possibilities. Then
you can test that commit. Testing can be running unit tests at that point, or a set of scripts or
manually validating the functionality. Depending on if the error is present or not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git bisect good               # bad if the commit has problem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eventually we will be left with 1 commit, which is the one that introduced some faults. For more
in-depth usage please &lt;a href=&#34;https://git-scm.com/docs/git-bisect&#34;&gt;read this brief reference guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;2-github-style-diff-on-terminal&#34;&gt;2. GitHub style diff on terminal&lt;/h3&gt;

&lt;p&gt;Ever wanted to see beautiful and clean diff on terminal? We&amp;rsquo;ve got one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diff_So_Fancy&lt;/strong&gt; is a plugin that does exactly like GitHub UI diff. To install,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install diff-so-fancy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to use when required:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git diff --color | diff-so-fancy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The good part, to make it default, which i recommend, issue this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git config --global core.pager &amp;quot;diff-so-fancy | less --tabs=4 -RFX&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more customization, take a look at the &lt;a href=&#34;https://github.com/so-fancy/diff-so-fancy&#34;&gt;diff_so_fancy GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If for some reason, you prefer side-by-side diff, then there are 2 projects that are worth looking:
1. &lt;a href=&#34;https://github.com/ymattw/cdiff&#34;&gt;cdiff&lt;/a&gt;
2. &lt;a href=&#34;https://github.com/jeffkaufman/icdiff&#34;&gt;icdiff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I personally haven&amp;rsquo;t used &lt;code&gt;icdiff&lt;/code&gt; and have limited exposure to &lt;code&gt;cdiff&lt;/code&gt;. I will continue with this topic
for the next month. Until then have fun bisecting.&lt;/p&gt;

&lt;h2 id=&#34;terminal&#34;&gt;Terminal&lt;/h2&gt;

&lt;h3 id=&#34;1-emacs-editor-of-lifetime-for-some&#34;&gt;1. Emacs: Editor of lifetime (for some)&lt;/h3&gt;

&lt;p&gt;Emacs was started 25 years ago but still remains both the source of inspiration to other
text editors and a powerful extensible text editor. I wouldn&amp;rsquo;t mind to call it more than
a text editor to a mini operating system. You can browse web, create web browser and reply
email. There&amp;rsquo;s more. This is how Emacs differs from Vi/Vim. Its great.&lt;/p&gt;

&lt;p&gt;I always like to do as much possible without losing context. Terminal is a most for me as
I learned and used Git to manage my projects. I don&amp;rsquo;t use GUI. So I must use terminal every
couple of minutes. I wanted terminal to do more. I wanted to use the text editor inside the
terminal. I wanted my text editor to be able to quickly edit commit message, Swift source
files and write my notes. I will probably go into the details of why I love text based note
taking and journal in some future blog post.&lt;/p&gt;

&lt;p&gt;Okay lets get Emacs. You can see for yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew update
$ brew install emacs --with-cocoa
$ brew linkapps emacs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You then should be able to run &lt;code&gt;emacs&lt;/code&gt; by issuing &lt;code&gt;$ emacs -nw&lt;/code&gt; in the terminal. If not, chances are
you have a conflicting system &lt;code&gt;emacs&lt;/code&gt;. On OSX/ mac OS emacs is installed by default. If your
installation doesn&amp;rsquo;t work then you can hop on this &lt;a href=&#34;http://www.wikemacs.org/wiki/Installing_Emacs_on_OS_X&#34;&gt;website guide&lt;/a&gt;
for troubleshooting.&lt;/p&gt;

&lt;p&gt;If you want the GUI Emacs then just issue &lt;code&gt;$emacs&lt;/code&gt;, the GUI is fairly simple but 2 superior things
to terminal mode is that the Fonts/Themes have broader color and size options. Second, you can use
the mouse. I don&amp;rsquo;t know if that&amp;rsquo;s actually a + point or not.&lt;/p&gt;

&lt;p&gt;I cannot however go into the details of setting up Emacs in one post or in tips. I would nonetheless
provide an &lt;a href=&#34;https://www.youtube.com/watch?v=mMcc0IF1hV0&#34;&gt;awesome YouTube channel for Emacs starter guide&lt;/a&gt;.
I highly recommend this guy&amp;rsquo;s series if you want to see how traditional editor is more than capable of
making you productive in the long run.&lt;/p&gt;

&lt;p&gt;To get more inspired/see whats possible then &lt;a href=&#34;https://www.youtube.com/watch?v=B6jfrrwR10k&#34;&gt;this video might be useful for starter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#34;https://www.youtube.com/watch?v=VADudzQGvU8&#34;&gt;video( The editor of lifetime)&lt;/a&gt; might be good for your weekend to see the history, design decision and the evolution of Emacs.&lt;/p&gt;

&lt;p&gt;Anyway, enough of Emacs. Hopefully, next month I will write my experience with &lt;strong&gt;org-mode&lt;/strong&gt; and other
 plugins I used daily.&lt;/p&gt;

&lt;h3 id=&#34;2-tmux-spliting-panes&#34;&gt;2. Tmux: Spliting Panes&lt;/h3&gt;

&lt;p&gt;So the idea of sitting in the Terminal continues. I want my terminal to support 2 windows, 1 for &lt;code&gt;zsh&lt;/code&gt; and
the other for &lt;code&gt;emacs&lt;/code&gt;. I use emacs for taking notes, work logs and journal with &lt;code&gt;org-mode&lt;/code&gt;. I occasionally
need to edit swift code in Emacs but I can if I have to.&lt;/p&gt;

&lt;p&gt;To install &lt;strong&gt;tmux&lt;/strong&gt;, please &lt;a href=&#34;http://kandelvijaya.com/2016/10/15/spicingterminal/&#34;&gt;refer to this blog&lt;/a&gt; I wrote
last month. Anyways, issue this command to quickly install tmux.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install tmux
$ tmux ;; to run tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Splitting the pane with tmux.
1. &lt;code&gt;CTRL + b&lt;/code&gt; then type &lt;code&gt;%&lt;/code&gt;
   creates a pane vertically.
2. &lt;code&gt;CTRL + b&lt;/code&gt; then type &lt;code&gt;&amp;quot;&lt;/code&gt;
   creates a pane horizontally.
3. &lt;code&gt;CTRL + b&lt;/code&gt; then type &lt;code&gt;o&lt;/code&gt; (not Zero)
   switches to another pane
4. &lt;code&gt;$exit&lt;/code&gt;
   close the current pane&lt;/p&gt;

&lt;p&gt;On my setup, I usually put a pane on top for git related work. The lower on runs &lt;code&gt;emacs&lt;/code&gt; and I have TODOs and
work log on that. Its quite handy.&lt;/p&gt;

&lt;h2 id=&#34;xcode&#34;&gt;XCode&lt;/h2&gt;

&lt;h3 id=&#34;1-delete-to-the-end-of-line&#34;&gt;1. Delete to the end of line&lt;/h3&gt;

&lt;p&gt;Like the most people, to delete a entire line, we Select it and then delete selection. i.e
CMD + SHIFT + -&amp;gt; , then DEL. Or you use the mouse to make the selection and then delete it.
The point is this is 2 step process. Wait, there is a 1 key binding to do it.
&lt;code&gt;CONTROL + K&lt;/code&gt;. That&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;This will delete to the end of the line. The same key binding works for Emacs too.&lt;/p&gt;

&lt;h3 id=&#34;2-final-resort&#34;&gt;2. Final Resort&lt;/h3&gt;

&lt;p&gt;This one might be a old school tips, nonetheless it needs to be put into picture. When everything is fine,
and XCode does something beyond your expectation. All you need is to clear artifacts. Every iOS developer
knows this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clean build, Try&lt;/li&gt;
&lt;li&gt;Quit and Restart XCode, Try&lt;/li&gt;
&lt;li&gt;Remove derived data, or change the path, Try.&lt;/li&gt;
&lt;li&gt;Restart your mac. [This is the least recommended]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As of this writing, I&amp;rsquo;m using Xcode8 and I had 2 interesting issue:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If somewhere in your code base there is a extension on &lt;code&gt;UIButton&lt;/code&gt;, you cant connect &lt;code&gt;@IBAction&lt;/code&gt; from
xib to UIView subclass.&lt;/li&gt;
&lt;li&gt;When compiling large project, the compiler optionally stops at various points and gives compile error.
I knew there was no error in it. I just changed some trivial code. However, I just run &lt;code&gt;CMD + R&lt;/code&gt; multiple
times to bypass each false error.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope Xcode 8.2 fixes those issues. Until then, Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Precision Timing in iOS &amp; Swift</title>
      <link>http://kandelvijaya.com/2016/10/25/precisiontiminginios/</link>
      <pubDate>Tue, 25 Oct 2016 19:36:52 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/25/precisiontiminginios/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Time is what we want most, but what we use worst. -&lt;em&gt;William Pen&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Timestamp is a very important issue we deal with in every single iOS/OSX project. Unlike timestamp, sometimes we want to measure method performance. Practically, i would use it for fun exploration. However, there are cases especially in games development where the precise time helps maintain consistent gameplay with scores. I explored a bit on how we can leverage the systems provided APIs to just get the current time stamp as precisely as possible.&lt;/p&gt;

&lt;p&gt;Two metrics to consider while going through are the precision in microseconds or beyond is better, i.e &lt;strong&gt;100.0123212321321321&lt;/strong&gt; seconds is better than &lt;strong&gt;100.012321&lt;/strong&gt; seconds. Second, how fast can we retrieve the time.&lt;/p&gt;

&lt;p&gt;Various API that one can use to get the time in iOS/ OSX. Not every method works on Linux.&lt;/p&gt;

&lt;h3 id=&#34;obvious&#34;&gt;Obvious&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NSDate().timeIntervalSince1970&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;foundation-c-api&#34;&gt;Foundation C API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CFAbsoluteTimeGetCurrent()&lt;/li&gt;
&lt;li&gt;CACurrentMediaTime()&lt;/li&gt;
&lt;li&gt;ProcessInfo.processInfo.systemUptime&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kernel-level-c-api&#34;&gt;Kernel level C API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;getTimeOfDay()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var timeOfDay = timeval()
 gettimeofday(&amp;amp;timeOfDay, nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;mach_absolute_time();
The finest-grained timepiece available on the system. This is a lower level kernel call. The value depends on the processor and conversion is required to get time information. The process is somewhat tedious and C level. The precision is in Nanoseconds.&lt;/p&gt;

&lt;p&gt;The way to set it up in Swift is as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        var info = mach_timebase_info()
        guard mach_timebase_info(&amp;amp;info) == KERN_SUCCESS else { return -1 }
        let currentTime = mach_absolute_time()
        let nanos = currentTime * UInt64(info.numer) / UInt64(info.denom)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the obvious winner for precision is &lt;code&gt;mach_absolute_time()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;performance-comparison&#34;&gt;Performance comparison:&lt;/h2&gt;

&lt;p&gt;These are calculated on MPB running i7 2.7 Ghz with 8 GB RAM. Take the ratio between different API calls into consideration. Actual run time for each call differs on the hardware and the environment used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mach_absolute_time()                            : 0.90 µs/call 
gettimeofday()                                  : 1.10 µs/call
CFAbsoluteTimeGetCurrent()                      : 1.13 µs/call
ProcessInfo.processInfo.systemUptime            : 1.14 µs/call
CACurrentMediaTime()                            : 1.15 µs/call
NSDate().timeIntervalSince1970                  : 4.55 µs/call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we saw, &lt;code&gt;mach_absolute_time()&lt;/code&gt; is very fast. Compared to NSDate(), its 5 times faster. The reason is, NSDate has to be allocated and initialized before we access the time. For &lt;code&gt;mach_absolute_time()&lt;/code&gt; we are making kernel level C API call.&lt;/p&gt;

&lt;h3 id=&#34;timing-function-execution&#34;&gt;Timing Function Execution&lt;/h3&gt;

&lt;p&gt;One can time a block of code by using this utility function that I wrote to produce the above comparision result set. You can find the full list of utility &lt;a href=&#34;https://gist.github.com/kandelvijaya/8095de4ec37f225b7e3fee171d8909fb&#34;&gt;on this Gist&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func timeBlockWithMach(_ block: () -&amp;gt; Void) -&amp;gt; TimeInterval {
    var info = mach_timebase_info()
    guard mach_timebase_info(&amp;amp;info) == KERN_SUCCESS else { return -1 }

    let start = mach_absolute_time()
    //Block execution to time!
    block()                         
    let end = mach_absolute_time()

    let elapsed = end - start

    let nanos = elapsed * UInt64(info.numer) / UInt64(info.denom)
    return TimeInterval(nanos) / TimeInterval(NSEC_PER_SEC)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;final-words&#34;&gt;final words&lt;/h2&gt;

&lt;p&gt;Sometimes, &lt;code&gt;getTimeOfDay()&lt;/code&gt; and &lt;code&gt;CFAbsoluteTimeGetCurrent()&lt;/code&gt; tend to match the efficiency of &lt;code&gt;mach_absolute_time()&lt;/code&gt;. This is at least what i found during my testing in playgrounds. However, &lt;code&gt;mach_absolute_time()&lt;/code&gt; is always the fastest one.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CACurrentMediaTime()&lt;/code&gt; is a wrapper around the most accurate time function in the system: mach_absolute_time(). &lt;code&gt;mach_absolute_time()&lt;/code&gt; will give you a really accurate number, but it&amp;rsquo;s based on the Mach absolute time unit which doesn&amp;rsquo;t actually map to anything pesky humans think in (and every CPU has a different scale). That&amp;rsquo;s why we have &lt;code&gt;CACurrentMediaTime()&lt;/code&gt; to make our lives easier. Its 0.2 microsecond slow than the &lt;code&gt;mach_absolute_time()&lt;/code&gt; because it runs the conversion on behalf of you from CPU ticks to the human parsable timestamp.&lt;/p&gt;

&lt;p&gt;For the simple API, I would prefer &lt;code&gt;CFAbsoluteTimeGetCurrent()&lt;/code&gt;. Using &lt;code&gt;mach_absolute_time()&lt;/code&gt; would be ideal case for timing method execution. However, a caution to take is that, not always the execution time is the same. Hence, sampling for 100 or so times of a method executing time and averaging will provide a good heuristic.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;https://bendodson.com/weblog/2013/01/29/ca-current-media-time/&#34;&gt;interesting blog post&lt;/a&gt; does cover some pitfalls of both &lt;code&gt;CACurrentMediaTime()&lt;/code&gt; and &lt;code&gt;mach_absolute_time()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;A full playground utility and usage of all the above mentioned Timing API can be found on the &lt;a href=&#34;https://gist.github.com/kandelvijaya/8095de4ec37f225b7e3fee171d8909fb&#34;&gt;gist i created&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope you enjoy. Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GTX [Git, Terminal, Xcode] 2tips for October</title>
      <link>http://kandelvijaya.com/gtxmonthly/gtxTips_oct2016/</link>
      <pubDate>Sun, 16 Oct 2016 16:10:42 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/gtxmonthly/gtxTips_oct2016/</guid>
      <description>

&lt;h3 id=&#34;gtx&#34;&gt;GTX:&lt;/h3&gt;

&lt;p&gt;I planned to find 2 tips for Git, Terminal and Xcode each, last weekend. Which should help me be more productive at work. Later, I thought to write it up and shere. This should be a series of mini tips, each month.&lt;/p&gt;

&lt;p&gt;GTX stands for Git, Terminal and Xcode. This abbreviation has local scope to this blog only. Other way to say, I made this GTX shortform.&lt;/p&gt;

&lt;h1 id=&#34;gtx-october-2016&#34;&gt;GTX October 2016&lt;/h1&gt;

&lt;h2 id=&#34;1-git&#34;&gt;1. Git&lt;/h2&gt;

&lt;p&gt;This time is about rewriting history. Yes, &lt;code&gt;rebase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, lets start by not rewritting history. Just the normal rebase.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(featureBranch)$ git rebase master 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will take all the changeset that were made in this &lt;code&gt;featureBranch&lt;/code&gt; and insert it on top of &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;Now lets rewrite history. Here is a typical log on git during work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ git log --oneline
 1ad2  Added support for X device
 2ad3  Dummy Commit
 3ad4  Empty line removal
 4ad5  Algorithm to find view on the screen done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s admit sometimes we just add &lt;code&gt;,&lt;/code&gt; or remove &lt;code&gt;//TODO:&lt;/code&gt; and call it a fix. Or Dummy Commit. However, I prefer to push my work as perfect commits when possible. Would it be nice, if we could not push those Dummy commit and minor typos we typically make while wrting commits. Well, its pretty easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(featureBranch)$ git rebase -i 4ad5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you will see bunch of text in the terminal, dont be afraid. Its all documented nicely in the git comments if you just look below the bunch of text.&lt;/p&gt;

&lt;p&gt;I would do something like this:
&lt;em&gt;&lt;code&gt;s&lt;/code&gt; is to squash to the last commit. &lt;code&gt;r&lt;/code&gt; is to reword the commit message.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; pick 4ad5  Algorithm to find view on the screen done!
 s 3ad4  Empty line removal
 s 2ad3  Dummy Commit
 r 1ad2  Added support for X device
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save and quit. (&lt;code&gt;:wq&lt;/code&gt; for default editor).
Follow along with the git interruption where you can modify commits. Each time save and return, after changing something.&lt;/p&gt;

&lt;p&gt;After, all is done. It looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(featureBranch)$glog
7ed8 Added support for That device and editied something.
6ed7 Algorithm to find view on the screen done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See we did rewrite the history. Nice commits. One thing to note is, git takes the changeset and applies follwing the commands like pick, reword, edit &amp;hellip; In the process it creates new commit hash. Its entirely new hash and commit. For the sake of simplicity, commit hash are 4 chars long in this example.&lt;/p&gt;

&lt;p&gt;CAUTION: Dont rebase what you have already pushed. Don&amp;rsquo;t dare to rebase when you have teammates working on that branch. Do it on yout unpushed branch.&lt;/p&gt;

&lt;p&gt;However, if you are 100% certain, that noone except you is working on the pushed branch, then issue this command to force the push to work after rebase.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push -f
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-terminal&#34;&gt;2. Terminal&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Removing a list of local branches except the current one.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    (master)$ git branch | grep -v master | xargs git branch -d 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some branches which cannot be removed can be cleaned with &lt;code&gt;git branch -D&lt;/code&gt; command but be responsible for this. &lt;code&gt;xargs&lt;/code&gt; is the utility to process list of lines as arguments. Read more on the man pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colorful man pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have installed &lt;code&gt;oh-my-zsh&lt;/code&gt; plugin for terminal then you can simply find these:  &lt;code&gt;plugins=(git)&lt;/code&gt; line in &lt;code&gt;~/.zshrc&lt;/code&gt; with &lt;code&gt;plugins=(git, colored-man-pages)&lt;/code&gt;. &lt;a href=&#34;http://kandelvijaya.com/2016/10/15/spicingterminal/&#34;&gt;Check this post&lt;/a&gt; to install and configure Oh-My-Zsh.&lt;/p&gt;

&lt;p&gt;ELSE, follow this link on &lt;a href=&#34;http://unix.stackexchange.com/a/147&#34;&gt;SO&lt;/a&gt; to know how things actually work and set it up.&lt;/p&gt;

&lt;h2 id=&#34;3-xcode&#34;&gt;3. Xcode&lt;/h2&gt;

&lt;p&gt;Trying to find where &lt;code&gt;Indent&lt;/code&gt; option is under the menu bar in Xcode. Or say there is a command you know should exist but don&amp;rsquo;t know where it is nested. For example, you want to insert &lt;code&gt;Special character&lt;/code&gt;.  Do you google? OR do you open each menu option and search. Theres a better way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command + Shift + /&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Press this keys and type the command you think your looking for. In this case, I&amp;rsquo;m looking to insert emoji. Thanks to my friend Andrii who showed me this tip.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kandelvijaya.com/img/commandShiftSearch.jpg&#34; alt=&#34;Cmd+Shift+/&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The cool part is this command works on every single Mac app. Its a great way to quickly find menu options that you forgot the location, shortcut or existance. Speaking about shortcut, lets get into the second tip of this month.&lt;/p&gt;

&lt;p&gt;Learning shortcuts makes you productive. Using keyboard to work and navigate is faster. If you want to discuss on mouse vs keybindings then reach out to &lt;code&gt;vim&lt;/code&gt; or &lt;code&gt;emacs&lt;/code&gt; user. &lt;em&gt;It would be quite interesting if I were able to show you how many kilometers your finger glide for a month wile working full time as software engineer. Maybe I will post it in comments, if I do that experiment. While you can be the first one too. From my rough estimation, in a month your finger moves 2.5 KM while moving the trackpad.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anyways, theres this app called &lt;a href=&#34;https://www.mediaatelier.com/CheatSheet/&#34;&gt;&lt;strong&gt;cheatsheet&lt;/strong&gt;&lt;/a&gt; which displays current application&amp;rsquo;s most important shortcuts while you press and hold &lt;strong&gt;Command&lt;/strong&gt; key for little longer thn 3 seconds. It really helps memorize the key bindings and gives you reference ontop of the app context. This app also works on any Mac app.&lt;/p&gt;

&lt;h2 id=&#34;cheers&#34;&gt;Cheers!&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s all for October. Lets see whats for November. Have fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spicing up OSX terminal experience!</title>
      <link>http://kandelvijaya.com/2016/10/15/spicingterminal/</link>
      <pubDate>Sat, 15 Oct 2016 13:53:43 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/15/spicingterminal/</guid>
      <description>

&lt;h1 id=&#34;why&#34;&gt;Why?&lt;/h1&gt;

&lt;p&gt;Let me show you how my terminal looks like.
&lt;img src=&#34;http://kandelvijaya.com/img/myTerminal.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I got this idea from a good friend and colleague of mine, while at work. I am always fond of good UI but I love to stick to command line when possible. Reasons: many. I love my terminal. While at work, i have 1 monitor dedicated to full screen terminal. And i love the subtle aesthetics of CLI UI.&lt;/p&gt;

&lt;p&gt;Now, if you want similar termnial then keep reading. Not everything is easy and comes with a &lt;code&gt;dmg&lt;/code&gt; file to double click. So be ready to type in few commadns on your uglish terminal.&lt;/p&gt;

&lt;h1 id=&#34;agenda&#34;&gt;Agenda&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Simple and easy customization with &lt;strong&gt;OH-MY-ZSH&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TMUX and beyond (&lt;em&gt;Im not a tmux expert.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;tmux theme pack and customization&lt;/li&gt;
&lt;li&gt;Few handy plugins&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;osx-default-terminal-ui-sucks&#34;&gt;OSX default terminal UI sucks&lt;/h2&gt;

&lt;p&gt;If you ever used Ubuntu then there are 2 things you will miss. Keep Window on Top is my favorite while its beautiful Terminal is second. Ubuntu has pretty decent UI for it. On mac, it sucks. Its typing bunch of black text on white background. All monochrome.&lt;/p&gt;

&lt;p&gt;So the dumbest upgrade first is Installing color theme for the terminal. I found &lt;a href=&#34;https://github.com/chriskempson/tomorrow-theme&#34;&gt;Beautiful Tomorrow theme&lt;/a&gt; library to be really good one. There is another for those preferring Sublime Text flavor &lt;a href=&#34;https://github.com/stephenway/monokai.terminal&#34;&gt;Monokai&lt;/a&gt;. I use Beautiful Tomorrow Bright as shown in the screenshot above.&lt;/p&gt;

&lt;p&gt;Download any theme you like and double click &lt;code&gt;.terminal&lt;/code&gt; file to install. Then head over to Terminal app, Preferences and then choose the theme that you installed.&lt;/p&gt;

&lt;p&gt;Now you get the color, color highlight for file and directory. And better readability.&lt;/p&gt;

&lt;h2 id=&#34;oh-my-zsh&#34;&gt;OH-MY-ZSH&lt;/h2&gt;

&lt;p&gt;This Open source project has more than &lt;code&gt;1000&lt;/code&gt; contributors, more than &lt;code&gt;Swift&lt;/code&gt;. Numbers doesnot tell a lot anyways. It comes with a bunch of themes and plugins.&lt;/p&gt;

&lt;p&gt;I wouldn&amp;rsquo;t get into more detail becasue the &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;repo&lt;/a&gt; site is quite self documenting. To install, copy paste the command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My preferred theme is &lt;code&gt;agnoster&lt;/code&gt;. To use this type this commands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd 
$ nano .zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside nano text editor, edit the file at the Theme point. Change it from &lt;code&gt;robbyrussell&lt;/code&gt; to &lt;code&gt;agnoster&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZSH_THEME=&amp;quot;agnoster&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to take this into effect, issue this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Theres a good chance the icons are broken and you see weird characters. Its all good. This theme uses special patched characters which, by default, the system doesnot have. To get those fonts and install them, issue this commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/powerline/fonts.git
$ sh fonts/install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the fonts should be installed. If the terminal is not displaying the proper beautiful characters then you might want to restart the terminal. Hopefully agnoster should be up and running. You should see similar screen to this:
&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;few-things-to-get-done-before-leving-for-next-topic&#34;&gt;Few things to get done before leving for next topic&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You probably dont want to see &lt;code&gt;yourusername@mac.local&lt;/code&gt; all the time, prefixxed to each command prompt. To get rid of this, do these things&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nano ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And inside the &lt;code&gt;.zshrc&lt;/code&gt; file, add a line at the top.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#To supress long username 
export DEFAULT_USER=yourusername
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, source the modified file like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You might want to make zsh your default prompt by this time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hopefully, you now start to enjoy terminal experience.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;powerline-status-https-github-com-powerline-powerline&#34;&gt;&lt;a href=&#34;https://github.com/powerline/powerline&#34;&gt;Powerline-status&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This tool is pain in the ass to install. &lt;code&gt;Python&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; default install location and &lt;code&gt;brew&lt;/code&gt;s warnings all affect how the setup goes. At least that was what happened to me. I will split this into a separate post when I&amp;rsquo;m done with it. For this we dont need the &lt;code&gt;powerline-status&lt;/code&gt;. However, we already installed the fonts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What was the line on the bottom of your terminal?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good question: I used &lt;strong&gt;tmux&lt;/strong&gt;. So what is tmux?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Its a windows/panes manager for terminal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To read more about it, take 2 minutes and go thorough this &lt;a href=&#34;http://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/&#34;&gt;awesome crash course&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyways, tmux uses that line to show the status of various things. And what it shows, can be customized including the color and font.&lt;/p&gt;

&lt;h4 id=&#34;before-we-proceed-we-will-need-brew-http-brew-sh&#34;&gt;Before we proceed, we will need &lt;a href=&#34;http://brew.sh&#34;&gt;&lt;code&gt;Brew&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;brew&lt;/code&gt; awesome package manager for OSX. I use it all the times to install and remove software.&lt;/p&gt;

&lt;p&gt;Go on and run this command to install brew.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to install &lt;code&gt;tmux&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;tmux&#34;&gt;tmux&lt;/h1&gt;

&lt;p&gt;To install &lt;code&gt;tmux&lt;/code&gt; issue this commnad:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then to run &lt;code&gt;tmux&lt;/code&gt;, issue this command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a green/yellow bar with some information on the bottom. Thats already great. Keep in mind, TMUX is a session/windows/pane manager.&lt;/p&gt;

&lt;p&gt;You can see the &lt;code&gt;powerline-status&lt;/code&gt; docs to see how to configure &lt;code&gt;tmux&lt;/code&gt;. I however preferred to use themes for &lt;code&gt;tmux&lt;/code&gt;. For now, lets get out of &lt;code&gt;tmux&lt;/code&gt; by &lt;code&gt;$ exit&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;using-tmux-thempack-https-github-com-jimeh-tmux-themepack&#34;&gt;Using &lt;a href=&#34;https://github.com/jimeh/tmux-themepack&#34;&gt;tmux-thempack&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Issue the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd
$ git clone https://github.com/jimeh/tmux-themepack.git ~/.tmux-themepack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a &lt;code&gt;.tmux.conf&lt;/code&gt; file if there is none. Else we will use that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch .tmux.conf
$ nano .tmux.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add this line to the tmux.conf file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &amp;quot;${HOME}/.tmux-themepack/powerline/block/green.tmuxtheme&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here you can choose a theme. I personally use green. To use that replace the current line you inserted with this one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &amp;quot;${HOME}/.tmux-themepack/powerline/double/green.tmuxtheme&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start &lt;code&gt;tmux&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you dont see the changes or the expected theme, then &lt;code&gt;$ exit&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd
$ cd .tmux-themepack
$ sh themepack.tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if the default (Blue) theme is applied, then edit the &lt;code&gt;themepack.tmux&lt;/code&gt; file. Inside the file there is a declaration,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;default_theme=&#39;double/blue&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change this to whichever one you like. Then run &lt;code&gt;$ sh themepack-tmux.sh&lt;/code&gt; to see the effect.&lt;/p&gt;

&lt;p&gt;Now you can see the bottom status bar. This theme uses powerline styles.&lt;/p&gt;

&lt;h2 id=&#34;4-few-handy-plugins&#34;&gt;4. Few handy plugins&lt;/h2&gt;

&lt;p&gt;I hope this is already too much. Forgive me if i did some typo and made your head sping for little longer. I aggregated this knowledge because i spent almost a day shuffling all over the internet to get powerline and tmux working like i wanted. Hope this helps.&lt;/p&gt;

&lt;p&gt;For the plugins and more themes, i will update the post sometime later. I think i already took wrote quite long.&lt;/p&gt;

&lt;p&gt;Next up: &lt;strong&gt;Powerline9K&lt;/strong&gt; to boost up your &lt;code&gt;git&lt;/code&gt; workflow. And my personal &lt;code&gt;git&lt;/code&gt; aliases ontop.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why String Manipulation is alien in Swift3?</title>
      <link>http://kandelvijaya.com/2016/10/11/swiftstringrange/</link>
      <pubDate>Tue, 11 Oct 2016 21:57:04 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/11/swiftstringrange/</guid>
      <description>

&lt;h1 id=&#34;objective-c-era&#34;&gt;Objective-C era&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;NSRange has a very simple API.
Finding a range, replacing, splitting or chopping are some few tricks off the bat for simple string manipulation. Objective-C and its idiomatic NSRange API looks such:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;public struct _NSRange {
    public var location: Int
    public var length: Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets say we wanted to extract just the name from a JSON string we got.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let a: NSString = “name: Bj P. Kandel”
let name = a.substring(from: (“name: “ as NSString).length)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;swift3-era&#34;&gt;Swift3 Era&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;let aSwift = “name: Bj P. Kandel”
let nameSwift = aSwift.substring(from: &amp;lt;String.Index&amp;gt;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;so-what-is-the-mess-with-string-index&#34;&gt;So what is the mess with String.Index?&lt;/h2&gt;

&lt;p&gt;NSString (and its NSRange) is not unicode aware. Swift intends to have great support for unicode. But do we care?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like Emoji then you do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;let emojiOBJC: NSString = “🤓”
emojiOBJC.length   //2 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the emoji is actually 1 character for you and our user. But NSString doesn’t co-relate to natural understanding. It thinks its 2 character. If we were to substring the Emoji, we could get this familiar unknown representation symbol.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emojiOBJC.substring(from: 1) //� 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;why&#34;&gt;Why?&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;NSString&lt;/code&gt; uses &lt;code&gt;UTF-16&lt;/code&gt; or 16 bits to encode a character into memory. When reading, &lt;strong&gt;16 bit of memory is treated as 1 character&lt;/strong&gt;. So to find the length of a string, count the 16 bit memory. Straightforward. Shall we think a bit more.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;16 bits == 2^16 possibilities == 65536 distinct characters that can be represented uniquely&lt;/p&gt;

&lt;p&gt;However, There are roughly 6,500 spoken languages in the world today. However, about 2,000 of those languages have fewer than 1,000 speakers. The most popular language in the world is Mandarin Chinese.  &lt;strong&gt;This 16 bit cannot all the characters from all of those language + emojis&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s why Swift String were made more &lt;strong&gt;unicode&lt;/strong&gt; correct. Unicode is somehow not limited to specify &lt;code&gt;16 bits&lt;/code&gt; for 1 Character or &lt;code&gt;64 bits&lt;/code&gt; . It doesn’t matter if a 😘 takes &lt;code&gt;32 bit&lt;/code&gt; or &lt;code&gt;128 bit&lt;/code&gt;(&lt;em&gt;just example&lt;/em&gt;) for user.  You, me and the other developers. Its 1 character afterall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hence, counting X bit memory to find number of characters went like PUFF! Length didn’t make sense.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let swiftyEmoji = (emojiOBJC as String)
(emojiOBJC as String).characters.count   // 1
(emojiOBJC as String).utf16.count        // 2 :: like the Objc length
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you think swift treats all characters as &lt;code&gt;32 bit&lt;/code&gt; memory then thats wrong. We don’t care how it stores. The interface that swift provides is what we care.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;“go”.characters.count   //2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For us, developers, &lt;code&gt;&amp;quot;go&amp;quot;&lt;/code&gt; is 2 character String. So is &lt;code&gt;&amp;quot;🍻👯&amp;quot;&lt;/code&gt; is 2 character String. Swift manages the details for us. &lt;strong&gt;String.characters&lt;/strong&gt; provides the most unicode aware interface to us. However, feel free to visit the UTF16 and UTF8 view. Remember those are just a &lt;code&gt;VIEW&lt;/code&gt; to the String.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;“go”.utf16.count        //2
“go”.utf8.count         //2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay lets move on to substring some Swifty String. And came swifty &lt;code&gt;Range&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;swifty-string-manipulation&#34;&gt;Swifty String Manipulation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;public struct Range&amp;lt;Bound : Comparable&amp;gt; {
    public let lowerBound: Bound
    public let upperBound: Bound
    public init(uncheckedBounds bounds: (lower: Bound, upper: Bound))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So substring operation becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;“Mr. X”.substring(from: &amp;lt;String.Index&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like we discussed we cannot just consider a Swift String as Array of Fixed Length Bits; like C &lt;code&gt;char*&lt;/code&gt; where char is 8 bit. Thus, to not chop our emoji, we need a unicode safe way. Swift provides &lt;code&gt;String.Index&lt;/code&gt;. You cannot get the &lt;code&gt;Int&lt;/code&gt; from the &lt;code&gt;String.Index&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-details&#34;&gt;The details&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This will be updated in the coming days.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;some-observations&#34;&gt;Some Observations&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There is no public API that turns &lt;code&gt;Range&amp;lt;Bounds&amp;gt;&lt;/code&gt; to &lt;code&gt;NSRange&lt;/code&gt; primarily because &lt;code&gt;lowerBound&lt;/code&gt; and &lt;code&gt;upperBound&lt;/code&gt; are not &lt;code&gt;Int&lt;/code&gt; and hence not convertible to &lt;code&gt;Int&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Its however trivial to make &lt;code&gt;Range&lt;/code&gt; from &lt;code&gt;NSRange&lt;/code&gt; although you cant make a range without actually specifying whose Range is this. In our case its String.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public extension NSRange {
    func toRange(forString: String) -&amp;gt; Range&amp;lt;String.Index&amp;gt; {
         let lowerIndex = forString.index(forString.startIndex, offsetBy: location)
         let upperIndex = forString.index(forString.startIndex, offsetBy: location + length)
         return Range(uncheckedBounds: (lowerIndex, upperIndex))
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Like above you need to specify WhoseRange to create startIndex and endIndex.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Range created for one string shouldn’t be used to manipulate another string directly. In essence, range is tightly owned and is applicable to its owner only.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let a = “this iz it”let aor = a.range(of: “iz”)!
var another = “th iz it”another.replaceSubrange(aor, with: “IS”) //OUTPUT =“thISz it”
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If we wanted to offset by +1 and use the same range then it can be done as such&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func rangeFrom(range: Range&amp;lt;String.Index&amp;gt;, forString: String, offset: Int) -&amp;gt; Range&amp;lt;String.Index&amp;gt; {
     let lowerIndex = forString.index(range.lowerBound, offsetBy: offset)
     let upperIndex = forString.index(range.upperBound, offsetBy: offset)
     returnRange(uncheckedBounds: (lowerIndex, upperIndex))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the above code, range is calculated from another string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let nr = rangeFrom(range: aor, forString: another, offset: 1)
another.replaceSubrange(nr, with: “IS”) //OUTPUT = “th IS it”
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The above rangeFrom function will produce error such as these:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the lower/upperBounds of the fromString are computed which will fall outside of the range of the entire fromString.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//fatal error: cannot decrement invalid index
//fatal error: cannot increment beyond endIndex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;should-we-use-simple-nsrange-and-nsstring-or-go-through-swifty-pain-to-be-unicode-aware&#34;&gt;Should we use simple &lt;code&gt;NSRange&lt;/code&gt; and &lt;code&gt;NSString&lt;/code&gt; or go through swifty pain to be unicode aware?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No support for 😎💔&lt;/li&gt;
&lt;li&gt;No support for Image Literals and other literals Apple will add on with time.&lt;/li&gt;
&lt;li&gt;Only supports with reasoning when UTF16 is used&lt;/li&gt;
&lt;li&gt;When there is a emoji like 💔  it will be counted as 2 characters if you use NSRange api and it gets worse if you try to insert a space in-between those 2 characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This all depends on your use case. If you are sure there are not special characters and emojis involved in the text then &lt;code&gt;UTF-16&lt;/code&gt; suffices for english languages. However, the more cryptic and global your content is the more precaution is needed. After all, Swift does all the heavy lifting, you just don’t get the &lt;code&gt;Int&lt;/code&gt; for &lt;code&gt;lowerbound&lt;/code&gt; and &lt;code&gt;upperbound&lt;/code&gt;.  Why not deal with it?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Any Hashabel Swift3</title>
      <link>http://kandelvijaya.com/2016/10/10/swift3-why-anyhashable-how-does-it-work-internally/</link>
      <pubDate>Mon, 10 Oct 2016 21:57:04 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/10/swift3-why-anyhashable-how-does-it-work-internally/</guid>
      <description>

&lt;p&gt;Evolution is predominant. Struggle for Survival applies to just anything that you see. Swift Programming Language is not an exception. Swift continues to change, evolve and mature over time. We can keep our feet wet, migrating year after year to Swift X version. I would. If it strives to be better. This years, &lt;code&gt;Swift 2 -&amp;gt; Swift 3&lt;/code&gt; was little more than a mini project. We saw lots of changes. For this edition, we will focus on &lt;code&gt;[AnyObject: NSObject]&lt;/code&gt;, which became &lt;code&gt;[AnyHashable: Any]&lt;/code&gt;. So does JSON, NSArray and NSDictionary. But why? We will dive deep, bear with me.&lt;/p&gt;

&lt;h1 id=&#34;anyobject-any&#34;&gt;AnyObject -&amp;gt; Any&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Swift focuses on using Value Types / immutable type in all cases possible. Foundation in Objective-C, has in other hand, all reference type. Classes. Which will be imported into reference type in swift.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AnyObject&lt;/code&gt; is idomatially ObjectiveC flavored and is reference type.&lt;/li&gt;
&lt;li&gt;Swift is platfrom independent, it had to move away from relying on ObjectiveC idioms and its runtime. Hence &lt;code&gt;AnyObject&lt;/code&gt; had to be replace with Value type and Swift flovored &lt;code&gt;Any&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;some-more-thoughts&#34;&gt;Some more thoughts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Any&lt;/code&gt; is value type. (We will see how it actually is boxing refernce but is Value type later on)&lt;/li&gt;
&lt;li&gt;All Objective-C Foundation &lt;code&gt;id&lt;/code&gt; types will be imported as &lt;code&gt;Any&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;All Swift types including Enum and Struct can be bridged to Objective-C as &lt;code&gt;id&lt;/code&gt;. This id is minimal.&lt;/li&gt;
&lt;li&gt;All Swift types that were bridged to Objective-C &lt;code&gt;id&lt;/code&gt; can be bridged back to &lt;code&gt;Swift&lt;/code&gt; as &lt;code&gt;Any&lt;/code&gt; or casted to their previous Type. Swift doesnot remove the type information during the boxing; internally.&lt;/li&gt;
&lt;li&gt;For Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum Direction2 : String {

    case down = &amp;quot;UP&amp;quot;
    case up = &amp;quot;DOWN&amp;quot;
}
var objcArray = NSMutableArray() // [NSObject, NSObject] or [id, id]
var swiftEnum = Direction2.down
objcArray.add(swiftEnum)

objcArray.lastObject as? Direction2     //down
objcArray.lastObject as? NSString //nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;nsobject-anyhashable-consider-the-situation&#34;&gt;NSObject -&amp;gt; AnyHashable Consider the situation -&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;[NSObject: AnyObject]&lt;/code&gt;. This turned into &lt;code&gt;[NSObject: Any]&lt;/code&gt;.
*   Its natural to get rid of &lt;code&gt;Object&lt;/code&gt; feeling. Afterall, &lt;code&gt;AnyObject&lt;/code&gt; became &lt;code&gt;Any&lt;/code&gt;.
*   Like before, we wanted to work with Value types. NSObject does 2 things which we want to avoid.
    *   It is a reference type. (There is also NSObjectProtocol)
    *   It requires us to know about ObjectiveC idiom. Swift is again platform independent.
*   A &lt;code&gt;Dictionary&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt; , &lt;code&gt;Set&lt;/code&gt; expects Key/Element to be &lt;code&gt;Hashable&lt;/code&gt;. There is no requirement it can just be some few types.
*   Hence, its more fluid to represent somewhat alien &lt;code&gt;[NSObject: AnyObject]&lt;/code&gt; with &lt;code&gt;[AnyHashable, Any]&lt;/code&gt;.
*   Wait. Why not &lt;code&gt;[Hashable: Any]&lt;/code&gt;? Good question. Lets see.&lt;/p&gt;

&lt;h2 id=&#34;why-not-hashable-any&#34;&gt;Why not &lt;code&gt;[Hashable: Any]&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Hashable&lt;/code&gt; conforms to &lt;code&gt;Equatable&lt;/code&gt; Protocol which has &lt;code&gt;==&lt;/code&gt; method requirement which has a &lt;code&gt;Self&lt;/code&gt; associated type. &lt;code&gt;public static func ==(lhs: Self, rhs: Self) -&amp;gt; Bool&lt;/code&gt; Hence, &lt;code&gt;Hashable&lt;/code&gt; can only be used to contraint Generic Types but not be used as a Concrete Type. (For more on this &lt;code&gt;Generic&lt;/code&gt; issue follow this &lt;strong&gt;link&lt;/strong&gt;. ) Thus we need a &lt;strong&gt;concrete type conforming to Hashable&lt;/strong&gt; that can fit into the Key of dictionary. We also need to enable heteregeneous collection because it needs to bridge to the Objective-C API NSArray and NSDictionary. Hence, we need a type erased container that confroms to &lt;code&gt;Hashable&lt;/code&gt; to be used inplace of &lt;code&gt;NSObject&lt;/code&gt;. That contianer is &lt;code&gt;AnyHashable&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;internals-of-anyhashable-if-you-already-know&#34;&gt;internals of AnyHashable If you already know&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Boxing&lt;/strong&gt; (I mean data boxing. Very essential technique.) and have something else to do, you can stop here. Okay, seems like you want to do &lt;strong&gt;Boxing&lt;/strong&gt;. Lets dig a little deep to see how and what &lt;code&gt;AnyHashable&lt;/code&gt; does? Better yet, lets simulate a similar &lt;code&gt;Any2Hashable&lt;/code&gt; together.&lt;/p&gt;

&lt;h2 id=&#34;boxing-it-is-a-technique-of-wrapping-a-object-inside-another-container-type-it-has-nothing-to-do-with&#34;&gt;Boxing It is a technique of wrapping a Object inside another container type. It has nothing to do with&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Decorator&lt;/code&gt; pattern but you are on track. The best example of this is &lt;code&gt;Optional&amp;lt;Wrapped&amp;gt;&lt;/code&gt; type. It takes anything and wraps it around with &lt;code&gt;Optional&lt;/code&gt; enum. This gets rid of lots of assumptions we used to do in &lt;code&gt;Objective-C&lt;/code&gt;. We will see how &lt;code&gt;AnyHashable&lt;/code&gt; boxes in the following section.&lt;/p&gt;

&lt;h3 id=&#34;step-1-basic-implementation-then-a-naive-way-to-wrap-this-or-box-all-hashable-conformed-type-would-be-such&#34;&gt;Step 1: Basic implementation Then a naive way to wrap this or box all Hashable conformed type would be such.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;struct Any2Hashable : Hashable {
    private var _box: Any

    var hashValue: Int {
        //LOOKOUT 1
        return (_box as? Hashable)?.hashValue ?? 0
    }

    public static func ==(_ lhs: Any2Hashable, _ rhs: Any2Hashable) -&amp;gt; Bool {
        return lhs.hashValue == rhs.hashValue
    }

    init?(_ any: Any) {
        //LOOKOUT 2
        if let thatAny = any as? Hashable {
            _box = thatAny
        }
        return nil
    }
}
 However, for 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lookout&lt;/code&gt; the compiler gives us this error and stops from any real success.
    //ERROR: Protocol Hashable can only be used as genric constraint because it has Self or associated type requirements
     These should throw back some lightbulbs. Its simple way of saying Hashable is just a Generic Type not a complete one. Because it conforms to Equatable which has Self requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kandelvijaya.com/index.php/2016/06/24/comparision-of-swift-programming-language-on-the-support-for-generics/&#34;&gt;To read more on Generics&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-2-improvement-with-generics&#34;&gt;Step 2: Improvement with Generics&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;struct Any2Hashable{
    var _box: Any
    private var _hashValue: Int

    var hashValue: Int {
        return _hashValue
    }

    public static func ==(_ lhs: Any2Hashable, _ rhs: Any2Hashable) -&amp;gt; Bool {
        return lhs.hashValue == rhs.hashValue
    }

    init&amp;lt;T: Hashable&amp;gt;(_ base: T) {
        _box = base
        _hashValue = base.hashValue
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will compile fine and work too. However, Swift stdlib has a longer implementation for a reason. Lets take a look at a scenario before proceeding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let iHA = Any2Hashable(12)
let i2HA = Any2Hashable(UInt8(12))
let sHA = Any2Hashable(&amp;quot;bj&amp;quot;)
iHA == sHA     // FALSE
iHA == i2HA    // TRUE :: Lookout
 As you can see, although the first comparion looks correct, the second one is somewhat a lie. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Swift is TypeSafe&lt;/strong&gt;. &amp;ldquo;A Int with 12 is not equal with Int8 with 12.&amp;rdquo; The underlying memory representation are different and it should not be equal. Although it seems. With our implementation of Any2Hashable we completely ignored the underlying type for sake of brevity. However, Swift standard library goes in length to fix this subtle fact.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let swiftInt64Hashable = Int(12) as AnyHashable
let swiftInt8Hashable = Int8(12) as AnyHashable
swiftInt8Hashable == swiftInt64Hashable  // FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We shall see how do they actually preserve type info during the comaprision although AnyHashable, from the outside, is a type erased container for Hashable.&lt;/p&gt;

&lt;h3 id=&#34;step-3-bringing-back-the-type-info&#34;&gt;Step 3: Bringing back the Type info&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;_box: Any&lt;/code&gt; is limiting us from type checking in our current implementation. What if we wrap the value that is being sent to initializer into a concrete internal struct. We could be on the way to storing typed type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Any2Hashable{
    //LOOKOUT
    var _box: _InternalConcreteBox

    init&amp;lt;T: Hashable&amp;gt;(_ base: T) {
        _box = _InternalConcreteBox(base)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing has changed here except we got rid of other helper methods to be concise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct _InternalConcreteBox&amp;lt;Base: Hashable&amp;gt; {

    var _baseHashable: Base
    var _hashValue: Int {
        return _baseHashable.hashValue
    }

    init(_ base: Base) {
        _baseHashable = base
    }

    //more code....
}
 Although in the right direction, Compiler wont allow us to use 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;_InternalConcreteBox&lt;/code&gt; as concrete type for &lt;code&gt;_box&lt;/code&gt; as this is a Generic Placeholder and incomplete Type (like before). Other than that everything looks good. We could say, &lt;code&gt;_InternalConcreteBoc&lt;/code&gt;_ is bocing a Type but it tries to preserve the original type info. Whereas, &lt;code&gt;Any2Hashable&lt;/code&gt; is a type erased container.&lt;/p&gt;

&lt;h3 id=&#34;step-4-solving-generics-yet-again-with-protocol-one-way-to-solve-this-issue-is-by-providing-a-complete-protocol-conformance-with-the-required-methods-like-so&#34;&gt;Step 4: Solving Generics yet again with Protocol One way to solve this issue is by providing a complete Protocol Conformance with the required methods like so:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;protocol _Any2HashableBox {
    var _hashValue: Int { get }
    func _isEqual(to: _Any2HashableBox) -&amp;gt; Bool?
}
 and the Internal Box looks like so. Then we can use 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;_Any2HashableBox&lt;/code&gt; as complete type. &lt;code&gt;struct _InternalConcreteBox&amp;lt;Base: Hashable&amp;gt;: _Any2HashableBox { ….&lt;/code&gt; While at our Any2Hashable site, the below change compiles perfectly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Any2Hashable{
    var _box: _Any2HashableBox
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-5-typed-equality-finally-now-that-we-have-every-structure-in-place-lets-fill-in-the-isequal-detail&#34;&gt;Step 5: Typed Equality, finally! Now that we have every structure in place, lets fill in the &lt;code&gt;isEqual&lt;/code&gt; detail.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;struct Any2Hashable{
    var _box: _Any2HashableBox

    public static func ==(_ lhs: Any2Hashable, _ rhs: Any2Hashable) -&amp;gt; Bool {
        return lhs._box._isEqual(to: rhs._box) ?? false
    }

    init&amp;lt;T: Hashable&amp;gt;(_ base: T) {
        _box = _InternalConcreteBox(base)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;protocol-for-boxtype&#34;&gt;Protocol for BoxType&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;protocol _Any2HashableBox {
    var _hashValue: Int { get }
    func _isEqual(to: _Any2HashableBox) -&amp;gt; Bool?
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;concrete-box-struct&#34;&gt;Concrete Box Struct&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;struct _InternalConcreteBox&amp;lt;Base: Hashable&amp;gt;: _Any2HashableBox {

    var _baseHashable: Base
    var _hashValue: Int {
        return _baseHashable.hashValue
    }

    init(_ base: Base) {
        _baseHashable = base
    }

    func _isEqual(to: _Any2HashableBox) -&amp;gt; Bool? {
        //LOOK OUT
        if let other : Base = (to as? _InternalConcreteBox)?._baseHashable {
            return _hashValue == other.hashValue
        }
        return nil
    }

}
 In this 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;//LOOK OUT ::&lt;/code&gt;, we are getting hold of the &lt;code&gt;&amp;lt;Base: Hashable&amp;gt;&lt;/code&gt; that was used to create &lt;code&gt;_InternalConcreteBox&lt;/code&gt;. In swift current implementation this line is replaced by a method &lt;code&gt;_unbox&amp;lt;T:Hashable&amp;gt;() -&amp;gt; T?&lt;/code&gt;. True, it requires deeper hair pulling. The above &lt;strong&gt;lookout&lt;/strong&gt; line retrieves the original type only if it is same concrete underlying type as &lt;code&gt;Base&lt;/code&gt; for self is. Sure, the line is not so clear on how it does in first sight but it uses Type inference to deduce the type while casting. Only if both self and other are same type we check for the hashValue and return. Lets see the tests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    let iHA = Any2Hashable(12)
    let swiftInt64Hashable = Int(12) as AnyHashable
    let swiftInt8Hashable = Int8(12) as AnyHashable

    swiftInt8Hashable == swiftInt64Hashable  // FALSE
    iHA == Any2Hashable(12)                  // TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;some-key-learnings&#34;&gt;Some Key Learnings:&lt;/h2&gt;

&lt;p&gt;So far, we have seen how to box types. &amp;ldquo;NOTE: Boxing should be done only when absolutely necessary.&amp;rdquo; We also saw how we can box types that actually preserves their original type and how it can leverage for cases like AnyHashable. This is the whole idea how AnyHashable in Swift core library works. There are other pieces of functionality I havent added just to make the topic concise. They can be found&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift/blob/master/stdlib/public/core/AnyHashable.swift&#34;&gt;on Swift github repo page&lt;/a&gt;. They have rich documentation but requires a lot of researching to get to know the why were they created like the way they are. This is how, swift bridges NSArray to [AnyHashable] and NSDictionary to AnyHashable: Any] providing a homogeneous boxed collection to work with.&lt;/p&gt;

&lt;h3 id=&#34;cheers-feel-free-to-edit-this-post-if-needed&#34;&gt;Cheers! Feel free to edit this post, if needed.&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Xcode8 ZStyle Code Formatter: How to write consistent styled code?</title>
      <link>http://kandelvijaya.com/2016/10/10/xcode-code-zstyle-code-formatter/</link>
      <pubDate>Mon, 10 Oct 2016 21:57:04 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/10/xcode-code-zstyle-code-formatter/</guid>
      <description>

&lt;p&gt;Yet again somebody missed to insert a empty line before the end of file, I missed to provide a empty space after dictionary Key  &lt;code&gt;[AnyHashable:Any]&lt;/code&gt; and you might miss to leave any of these kinds of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//.......
    return data
}
func compute(a:Int,b:Int)-&amp;gt;Int{
//.......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should have been:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//.......
return data
}   

func compute(a: Int, b: Int) -&amp;gt; Int {
//.......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you see where I&amp;rsquo;m heading with this.&lt;/p&gt;

&lt;h2 id=&#34;bigger-picture&#34;&gt;Bigger Picture&lt;/h2&gt;

&lt;p&gt;To just briefly explain the scenario, we are 12 iOS Engineers working harder than before (pun intended), cramming hundreds of line of code daily.
We have bunch of features to roll out, release deadline to meet and a generation next to come and read the code we wrote with great thought.
We couldn&amp;rsquo;t possibly achieve if, each of us, with unique style  &lt;code&gt;(tabs vs spaces)&lt;/code&gt; worked on. Thus, we have a Zalando iOS coding guidelines.
Which keeps us in the same fashion. But like again, there is no way to actually force the project to have a strict guidelines and we humans are error prone.&lt;/p&gt;

&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;Some empty line or no empty spaces sneaks in the code base. We need a tool to correct out the our style to Zalando iOS style.
After all we care, because mainly we are a fashionable technology company. All right!&lt;/p&gt;

&lt;h2 id=&#34;solutions-available&#34;&gt;Solutions Available&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;Swift Lint&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Its a good library but we have some serious issue with it.&lt;/li&gt;
&lt;li&gt;We have a large build time and this adds some more.&lt;/li&gt;
&lt;li&gt;We already have hundreds of TODO and FIXME that are signaling warnings. This adds even more errors/warnings.&lt;/li&gt;
&lt;li&gt;The tool has limited possibility of correction. Our solution is not to give things to the devs to correct. They are already busy. It is to work for them.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;our-attempt&#34;&gt;Our Attempt&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt; WWDC 2016&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrate SwiftLint and use regex to auto correct. But still the disadvantage was bigger than advantage.&lt;/li&gt;
&lt;li&gt;Abandoned!
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt; WWDC 2016&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source Kit Extension API announced.&lt;/li&gt;
&lt;li&gt;I started secretly using this extension to auto correct only things we cared.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;birth of XcodeFormatter!&lt;/strong&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xcodeformatter&#34;&gt;XcodeFormatter&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Its a file based auto formatter. It wont warn or error. It just silently formats to the ZStyle. Pretty silently.&lt;/li&gt;
&lt;li&gt;Reach out to the Editor -&amp;gt; XFormatter -&amp;gt; &amp;hellip;(options)&lt;/li&gt;
&lt;li&gt;When you absolutely don&amp;rsquo;t want to, then don&amp;rsquo;t.&lt;/li&gt;
&lt;li&gt;If you want to, which you should, then provide a shortcut or if you are mouse ninja then reach in the Editor  -&amp;gt;&lt;/li&gt;
&lt;li&gt;Done!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;technical-side&#34;&gt;Technical Side&lt;/h2&gt;

&lt;p&gt;I prefer to run down the tech side by data flow or message flow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When user presses, Editor  -&amp;gt; XcodeFormatter  -&amp;gt; Correct All: Xcode sends the file content to our App Extension.&lt;/li&gt;
&lt;li&gt;The app extension, choses a certain formatting method based on the command user clicked.&lt;/li&gt;
&lt;li&gt;Inside the app extension, there are  &lt;code&gt;RegexMatch&lt;/code&gt; and  &lt;code&gt;CodeBlockAnalyzer&lt;/code&gt; which stays at the heart of matching the wrong style.&lt;/li&gt;
&lt;li&gt;Inside the app extension, there are  &lt;code&gt;MatchCorrection&lt;/code&gt; and  &lt;code&gt;EmptyLineCorrection&lt;/code&gt; which stays at the heart of correcting the matched code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MatchCorrectionInfo&lt;/code&gt; is used to correct the match in case of  &lt;code&gt;MatchCorrection&lt;/code&gt;. Idea is to replace the Capture Group.  &lt;code&gt;MatchCorrectionInfo&lt;/code&gt; provides a  &lt;code&gt;[Int: String]&lt;/code&gt; with int for index of Capture Group and String for what to replace the found match with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EmptyLineCorrection&lt;/code&gt; does not need a correction rule as it trivially inserts/removes empty line above/below each  &lt;code&gt;CodePosition&lt;/code&gt; passed into correct.&lt;/li&gt;
&lt;li&gt;All the matches and analyzation happens if the current character in code is not inside a  &lt;code&gt;//Comment&lt;/code&gt; or  &lt;code&gt;&amp;quot;String quote&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When everything is done, the  &lt;code&gt;XCSourceEditorExtension&lt;/code&gt; gets the corrected data, uses it to put the changes back into the  &lt;code&gt;NSMutableArray&lt;/code&gt; of lines Xcode provided us initially.&lt;/li&gt;
&lt;li&gt;This change is then reflected in Xcode once the completion handler is called.&lt;/li&gt;
&lt;li&gt;Boom! Done!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-more-deeper-level-working-will-be-covered-when-this-article-is-updated&#34;&gt;A more deeper level working will be covered when this article is updated.&lt;/h3&gt;

&lt;p&gt;For details, check the readme file on github. &lt;a href=&#34;https://github.com/kandelvijaya/XcodeFormatter&#34;&gt;XcodeFormatter On Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;cheers&#34;&gt;Cheers!&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://kandelvijaya.com/about/</link>
      <pubDate>Sun, 09 Oct 2016 22:55:28 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/about/</guid>
      <description>

&lt;h1 id=&#34;me&#34;&gt;Me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Kandelvijaya&lt;/li&gt;
&lt;li&gt;twitter.com/kandelvijaya&lt;/li&gt;
&lt;li&gt;linkedin.com/kandelvijaya&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://kandelvijaya.com/drafts/readingWritingFiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kandelvijaya.com/drafts/readingWritingFiles/</guid>
      <description>

&lt;h1 id=&#34;reading-and-writing-files-from-playground&#34;&gt;Reading and Writing Files from Playground&lt;/h1&gt;

&lt;h2 id=&#34;what-is-sandboxing&#34;&gt;What is sandboxing?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Limiting the resources including storage, ports, permission to the application.&lt;/li&gt;
&lt;li&gt;Good to run a third party software without having the device infected.&lt;/li&gt;
&lt;li&gt;Every process runs in their own region and limits making no cross pollination, infection and so on.&lt;/li&gt;
&lt;li&gt;Web browser typically runs in a sandbox mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;playground&#34;&gt;Playground&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Playground is Sandboxed so User&amp;rsquo;s directories are not accessible directly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ios-specifics&#34;&gt;iOS specifics&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You cant access or write outside of sandbox.&lt;/li&gt;
&lt;li&gt;You can read file from the main bundle resouce.&lt;/li&gt;
&lt;li&gt;Can you write into bundle&amp;rsquo;s resource folder in iOS?
&lt;strong&gt;ANS&lt;/strong&gt;: No.
&lt;strong&gt;LONG&lt;/strong&gt;: You cannot write to this directory. To prevent tampering, the bundle directory is signed at installation time. Writing to this directory changes the signature and prevents your app from launching. You can, however, gain read-only access to any resources stored in the apps bundle.&lt;/li&gt;
&lt;li&gt;An iOS app may create additional directories in the &lt;code&gt;Documents&lt;/code&gt;, &lt;code&gt;Library&lt;/code&gt;, and &lt;code&gt;tmp&lt;/code&gt; directories. You might do this to better organize the files in those locations. For more info, &lt;a href=&#34;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html&#34;&gt;see the documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ios-simulators&#34;&gt;iOS Simulators&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;They can read file from any location that can be located by the user. For example: a mock json located in Desktop can be used to render contents in the simulator instead of downloading each time.&lt;/li&gt;
&lt;li&gt;Writing file to any place?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;osx-specifics&#34;&gt;OSX specifics&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The OS X file system is designed for Macintosh computers, where both users and software have access to the file system.&lt;/li&gt;
&lt;li&gt;Apps installed from the app store are sandboxed. Third party apps may or maynot be.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;the-number-of-file-reading-apis&#34;&gt;The number of file reading APIs:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;NSFileManager&lt;/li&gt;
&lt;li&gt;NSBundle &lt;code&gt;pathForResource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Direct String &lt;code&gt;string(contentsOfFile: encoding:)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;NSSearchPathForDirectoriesInDomains&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although it seems like there are lots of options to read/write files, its not ture. Basically, there are two ways to get the file. If the directory being referred is a standard directory then the system provides bunch of API, like NSBundle and NSFileManager. Whereas if the directory or file is not a well known location then the user is required to build the path and then use the appropriate APIs.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>