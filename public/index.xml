<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kandelvijaya</title>
    <link>http://kandelvijaya.com/</link>
    <description>Recent content on Kandelvijaya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Vijaya P. Kandelvijaya</copyright>
    <lastBuildDate>Sun, 04 Jun 2017 20:17:50 +0200</lastBuildDate>
    
	<atom:link href="http://kandelvijaya.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Refactoring ViewController in the dark!</title>
      <link>http://kandelvijaya.com/2017/06/04/refactoringviewcontrollers/</link>
      <pubDate>Sun, 04 Jun 2017 20:17:50 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2017/06/04/refactoringviewcontrollers/</guid>
      <description>When to refactor legacy code? Last few releases, I was working on a fairly old code. I was required to implement a small new feature; a item list controller. The controller maintains list of items in horizontal collection view.
We were using this controller to show remote items and last seen items (local). Now the new feature was to use another api URL and then transform the received content into appropriate items.</description>
    </item>
    
    <item>
      <title>Functor: Mapping over things!</title>
      <link>http://kandelvijaya.com/2017/05/28/fp-functor/</link>
      <pubDate>Sun, 28 May 2017 18:43:48 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2017/05/28/fp-functor/</guid>
      <description>Prelude Specialization is the key to mastery; functional programming specializes only on function. Thats all there is. The mastery with FP is to reduce complexity, which is what software engineering is all about. Don&amp;rsquo;t get me wrong, Software engineering is also about delivering product not only over engineering. Delivering real world products used to be the stressful part about functional programming. Not anymore.
Specialization on functions creates a whole new paradigm.</description>
    </item>
    
    <item>
      <title>Testing Network Calls with URLProtocol</title>
      <link>http://kandelvijaya.com/2017/04/30/urlprotocolandunittesting/</link>
      <pubDate>Sun, 30 Apr 2017 00:45:00 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2017/04/30/urlprotocolandunittesting/</guid>
      <description>URLProtocol and Unit Testing  An NSURLProtocol object handles the loading of protocol-specific URL data. The NSURLProtocol class itself is an abstract class that provides the infrastructure for processing URLs with a specific URL scheme. You create subclasses for any custom protocols or URL schemes that your app supports.
 The main point is:
 All you have to do is define your protocol class and call the registerClass(_:) class method during your app’s launch time so that the system is aware of your protocol.</description>
    </item>
    
    <item>
      <title>Backend As Service from Scratch</title>
      <link>http://kandelvijaya.com/2017/03/19/parseservermigration/</link>
      <pubDate>Sun, 19 Mar 2017 23:02:15 +0100</pubDate>
      
      <guid>http://kandelvijaya.com/2017/03/19/parseservermigration/</guid>
      <description>Parse was a great initiative. Sadly it went down. It was a fantastic solution for those who want to quickly get their app done and backend was just a breeze. Things changed. However, not all is lost. Parse became open source. The source for Server and Dashboard are both out in the open. I had a mobile app that used Parse heavily . Parse shutdown was really hard for me.</description>
    </item>
    
    <item>
      <title>GTX March: Git Auto Deployment..</title>
      <link>http://kandelvijaya.com/gtxmonthly/gtxtips_mar2017/</link>
      <pubDate>Sat, 11 Mar 2017 17:16:52 +0100</pubDate>
      
      <guid>http://kandelvijaya.com/gtxmonthly/gtxtips_mar2017/</guid>
      <description>Git Last few months, I spent my off work time migrating one of the old app to self hosted Parse Server. Although, writing about Parse Server on dedicated Linux machine is out of scope for this post, I got few useful points regarding the use of terminal and git.
Lets say you have a website. You want to use git. When you git push, it should deploy your site automatically.</description>
    </item>
    
    <item>
      <title>GTX Nov: Bisecting, Emacs and killing line. </title>
      <link>http://kandelvijaya.com/gtxmonthly/gtxtips_nov2016/</link>
      <pubDate>Sun, 20 Nov 2016 14:28:01 +0100</pubDate>
      
      <guid>http://kandelvijaya.com/gtxmonthly/gtxtips_nov2016/</guid>
      <description>Welcome to this months GTX. How are you? Its cold here in Berlin. Lets get to this months GTX(Git, Terminal, XCode) tips.
Git 1. Finding which commit broke the project first git-bisect is the command you are looking for if you happen to search for a commit in the past week which silently broke the project and the CI is failing.
I was introduced to this command while at work from my colleague, @ramy_kfoury.</description>
    </item>
    
    <item>
      <title>Precision Timing in iOS &amp; Swift</title>
      <link>http://kandelvijaya.com/2016/10/25/precisiontiminginios/</link>
      <pubDate>Tue, 25 Oct 2016 19:36:52 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/25/precisiontiminginios/</guid>
      <description>Time is what we want most, but what we use worst. -William Pen
 Timestamp is a very important issue we deal with in every single iOS/OSX project. Unlike timestamp, sometimes we want to measure method performance. Practically, i would use it for fun exploration. However, there are cases especially in games development where the precise time helps maintain consistent gameplay with scores. I explored a bit on how we can leverage the systems provided APIs to just get the current time stamp as precisely as possible.</description>
    </item>
    
    <item>
      <title>GTX [Git, Terminal, Xcode] 2tips for October</title>
      <link>http://kandelvijaya.com/gtxmonthly/gtxtips_oct2016/</link>
      <pubDate>Sun, 16 Oct 2016 16:10:42 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/gtxmonthly/gtxtips_oct2016/</guid>
      <description>GTX: I planned to find 2 tips for Git, Terminal and Xcode each, last weekend. Which should help me be more productive at work. Later, I thought to write it up and shere. This should be a series of mini tips, each month.
GTX stands for Git, Terminal and Xcode. This abbreviation has local scope to this blog only. Other way to say, I made this GTX shortform.
GTX October 2016 1.</description>
    </item>
    
    <item>
      <title>Spicing up OSX terminal experience!</title>
      <link>http://kandelvijaya.com/2016/10/15/spicingterminal/</link>
      <pubDate>Sat, 15 Oct 2016 13:53:43 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/15/spicingterminal/</guid>
      <description>Why? Let me show you how my terminal looks like. I got this idea from a good friend and colleague of mine, while at work. I am always fond of good UI but I love to stick to command line when possible. Reasons: many. I love my terminal. While at work, i have 1 monitor dedicated to full screen terminal. And i love the subtle aesthetics of CLI UI.</description>
    </item>
    
    <item>
      <title>Why String Manipulation is alien in Swift3?</title>
      <link>http://kandelvijaya.com/2016/10/11/swiftstringrange/</link>
      <pubDate>Tue, 11 Oct 2016 21:57:04 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/11/swiftstringrange/</guid>
      <description>Objective-C era  NSRange has a very simple API. Finding a range, replacing, splitting or chopping are some few tricks off the bat for simple string manipulation. Objective-C and its idiomatic NSRange API looks such:
 public struct _NSRange { public var location: Int public var length: Int }  Lets say we wanted to extract just the name from a JSON string we got.
let a: NSString = “name: Bj P.</description>
    </item>
    
    <item>
      <title>Why Any Hashabel Swift3</title>
      <link>http://kandelvijaya.com/2016/10/10/swift3-why-anyhashable-how-does-it-work-internally/</link>
      <pubDate>Mon, 10 Oct 2016 21:57:04 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/10/swift3-why-anyhashable-how-does-it-work-internally/</guid>
      <description>Evolution is predominant. Struggle for Survival applies to just anything that you see. Swift Programming Language is not an exception. Swift continues to change, evolve and mature over time. We can keep our feet wet, migrating year after year to Swift X version. I would. If it strives to be better. This years, Swift 2 -&amp;gt; Swift 3 was little more than a mini project. We saw lots of changes.</description>
    </item>
    
    <item>
      <title>Xcode8 ZStyle Code Formatter: How to write consistent styled code?</title>
      <link>http://kandelvijaya.com/2016/10/10/xcode-code-zstyle-code-formatter/</link>
      <pubDate>Mon, 10 Oct 2016 21:57:04 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/2016/10/10/xcode-code-zstyle-code-formatter/</guid>
      <description>Yet again somebody missed to insert a empty line before the end of file, I missed to provide a empty space after dictionary Key [AnyHashable:Any] and you might miss to leave any of these kinds of code:
//....... return data } func compute(a:Int,b:Int)-&amp;gt;Int{ //.......  Which should have been:
//....... return data } func compute(a: Int, b: Int) -&amp;gt; Int { //.......  So you see where I&amp;rsquo;m heading with this.</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://kandelvijaya.com/about/</link>
      <pubDate>Sun, 09 Oct 2016 22:55:28 +0200</pubDate>
      
      <guid>http://kandelvijaya.com/about/</guid>
      <description> Me  Kandelvijaya twitter.com/kandelvijaya linkedin.com/kandelvijaya  </description>
    </item>
    
  </channel>
</rss>